{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/ProjectTasks/Tasks/Task/Post.module.css","components/ProjectTasks/Tasks/Tasks.module.css","components/Notes/Notes.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Header/Header.module.css","components/ProjectTasks/Project.module.css","components/Navbar/Navbar.jsx","assets/img/avatar.jpg","assets/img/del.png","assets/img/edit.jpg","components/ProjectTasks/Tasks/Task/Post.jsx","assets/img/plus.svg","components/ProjectTasks/Tasks/Tasks.jsx","api/api.js","redux/tasks-reducer.js","components/ProjectTasks/Tasks/TasksContainer.jsx","components/ProjectTasks/Project.jsx","components/Notes/Notes.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","redux/messages-reducer.js","components/Dialogs/Dialogs-container.jsx","assets/img/header.jpg","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","App.js","redux/news-reducer.js","redux/store-redux.js","index.js","components/Navbar/Navbar.module.css"],"names":["module","exports","Navbar","className","classes","nav","item","to","activeClassName","active","Post","props","s","postContainer","post","avatarAndDateBlock","src","avatar","alt","pubDate","time","text","taskType","bugType","options","width","del","onClick","deleteTask","id","edit","statusBar","status","Tasks","tasks","map","p","reverse","projects","value","name","projectsBlock","onChange","onProjectChange","selectedProject","ref","selectedProjRef","style","plus","fontWeight","fontFamily","marginTop","marginBottom","ta","newPostTextRef","newTaskText","onPostChange","settings","onTypeChange","taskTypeRef","onStatusChange","statusRef","disabled","addTask","tasksAPI","axios","get","then","response","data","newTask","userAPI","ADD_TASK","UPDATE_NEW_POST_TEXT","SET_TASKS","UPDATE_TASK_TYPE","UPDATE_STATUS","DEL_TASK","SET_PROJECTS","CHANGE_PROJECT","initState","setTasks","type","setProjects","toggleIsFetching","isFetching","tasksReducer","state","action","task","newText","project","valueOf","splice","findIndex","e","TasksContainer","newTextRef","React","createRef","now","Date","toLocaleDateString","getHours","getMinutes","projectId","current","updateNewPostText","updateTaskType","updateStatus","target","changeProject","getTasks","this","getProjects","Component","connect","tasksData","dispatch","resultCode","deleteTaskFromState","Project","profileContent","store","Notes","notes","textField","Message","message","sendTime","dateAndTime","DialogItem","Dialogs","newMessageText","contactsElements","contacts","el","messages","m","dialogsPage","dialogs","newMessage","placeholder","newMessageTA","onNewMessageBodyChange","buttonsBlock","sendMessage","addFile","recordVoice","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","messagesReducer","DialogsContainer","messagesData","updateNewMessageTextActionCreator","Header","header","i","loginBlock","isAuth","login","SET_USER_DATA","email","authReducer","HeaderContainer","setAuthUserData","auth","App","path","render","newsReducer","reducers","combineReducers","newsPage","createStore","applyMiddleware","thunkMiddleWare","rerenderEntireTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.3a484d30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsPage\":\"Dialogs_dialogsPage__MoC-U\",\"dialogs\":\"Dialogs_dialogs__1wiep\",\"contacts\":\"Dialogs_contacts__1RXRR\",\"item\":\"Dialogs_item__tHpcm\",\"messages\":\"Dialogs_messages__1OzbL\",\"newMessage\":\"Dialogs_newMessage__2aC8M\",\"newMessageTA\":\"Dialogs_newMessageTA__2uRDY\",\"buttonsBlock\":\"Dialogs_buttonsBlock__19bGz\",\"sendMessage\":\"Dialogs_sendMessage__1-9tO\",\"addFile\":\"Dialogs_addFile__3dz_l\",\"recordVoice\":\"Dialogs_recordVoice__17rIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__15G5d\",\"post\":\"Post_post__2a6Sv\",\"avatarAndDateBlock\":\"Post_avatarAndDateBlock__3U0i3\",\"bugType\":\"Post_bugType__1CYDK\",\"taskType\":\"Post_taskType__hh-k8\",\"text\":\"Post_text__1jkn9\",\"options\":\"Post_options__2x3NQ\",\"statusBar\":\"Post_statusBar__1ijit\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks\":\"Tasks_tasks__2LyCY\",\"projectsBlock\":\"Tasks_projectsBlock__2HAVs\",\"ta\":\"Tasks_ta__3-Moz\",\"settings\":\"Tasks_settings__2FjOy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notes\":\"Notes_notes__2079q\",\"textField\":\"Notes_textField__73n_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2jDLp\",\"sendTime\":\"Message_sendTime__3IxO3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__2PRIG\",\"active\":\"DialogItem_active__ml6qj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__RIxUD\",\"loginBlock\":\"Header_loginBlock__1hyqr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"Project_profileContent__1KM6_\"};","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to={'/project'} activeClassName={classes.active}>Задачи</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={'/notes'} activeClassName={classes.active}>Заметки</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={'/dialogs'} activeClassName={classes.active}>Сообщения</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <a>Подписки</a>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <a>Настройки</a>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <a>Проекты</a>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar","export default __webpack_public_path__ + \"static/media/avatar.467f4a2c.jpg\";","export default __webpack_public_path__ + \"static/media/del.01abcba8.png\";","export default __webpack_public_path__ + \"static/media/edit.0423e905.jpg\";","import s from './Post.module.css'\r\nimport avatar from '../../../../assets/img/avatar.jpg'\r\nimport del from '../../../../assets/img/del.png'\r\nimport edit from '../../../../assets/img/edit.jpg'\r\n\r\nconst Post = (props) => {\r\n    return <div className={s.postContainer}>\r\n        <div className={s.post}>\r\n            <div className={s.avatarAndDateBlock}>\r\n                <img src={avatar} alt={\"ava\"}/>\r\n                <div>{props.pubDate}</div>\r\n                <div>{props.time}</div>\r\n            </div>\r\n            <div className={s.text}>\r\n                <span className={\r\n                    props.taskType === 'TASK' ?\r\n                    s.taskType : s.bugType\r\n                }>{props.taskType}</span>\r\n                <span>: {props.text}</span>\r\n            </div>\r\n            <div className={s.options}>\r\n                <img width={'15 px'} src={del} onClick={() => props.deleteTask(props.id)} alt={\"del\"}/>\r\n                <img width={'15 px'} src={edit} alt={\"edit\"}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.statusBar}>\r\n            <div>STATUS: {props.status}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post\r\n","export default __webpack_public_path__ + \"static/media/plus.96dc0911.svg\";","import s from './Tasks.module.css'\r\nimport * as React from \"react\";\r\nimport Post from \"./Task/Post\";\r\nimport del from '../../../assets/img/del.png'\r\nimport edit from '../../../assets/img/edit.jpg'\r\nimport plus from '../../../assets/img/plus.svg'\r\n\r\nlet Tasks = (props) => {\r\n\r\n    let tasks = props.tasks.map(p => (<Post key={p.id}\r\n                                            id={p.id}\r\n                                            pubDate={p.pubDate}\r\n                                            time={p.time}\r\n                                            text={p.text}\r\n                                            status={p.status}\r\n                                            taskType={p.taskType}\r\n                                            deleteTask={props.deleteTask}\r\n    />)).reverse()\r\n\r\n    let projects = props.projects.map(p => <option key={p.id} value={p.id}>{p.name}</option>)\r\n\r\n    return <div className={s.tasks}>\r\n        <div className={s.projectsBlock}>\r\n            Текущий проект - <select onChange={props.onProjectChange}\r\n                                     value={props.selectedProject.id}\r\n                                     ref={props.selectedProjRef}\r\n                                     style={{width: 'auto'}\r\n\r\n                                     }>{projects}</select>\r\n            <img src={plus}/>\r\n            <img src={del}  alt={\"del\"}/>\r\n            <img src={edit} alt={\"edit\"}/>\r\n        </div>\r\n\r\n        <div style={{\r\n            fontWeight: 1000,\r\n            fontFamily: 'Lucida Console',\r\n            marginTop: 30 + 'px',\r\n            marginBottom: 5 + 'px'\r\n        }}>Создать задачу\r\n        </div>\r\n\r\n        <textarea\r\n            className={s.ta}\r\n            ref={props.newPostTextRef}\r\n            value={props.newTaskText}\r\n            onChange={props.onPostChange}\r\n        />\r\n\r\n\r\n        <div className={s.settings}>\r\n            Тип задачи: <select value={props.taskType}\r\n                                onChange={props.onTypeChange}\r\n                                ref={props.taskTypeRef}\r\n        >\r\n            <option>TASK</option>\r\n            <option>BUG</option>\r\n        </select>\r\n            {` Статус:`} <select value={props.status}\r\n                                 onChange={props.onStatusChange}\r\n                                 ref={props.statusRef}\r\n        >\r\n            <option>SOLVED</option>\r\n            <option>IN PROGRESS</option>\r\n            <option>ACTIVE</option>\r\n        </select>\r\n            <button\r\n                disabled={\r\n                    props.newTaskText === ''\r\n                }\r\n                onClick={props.addTask}>Add New Task</button>\r\n        </div>\r\n\r\n        My Tasks\r\n        <div>\r\n            {tasks}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Tasks\r\n","import axios from \"axios\";\r\n\r\nexport const tasksAPI = {\r\n    getProjects() {\r\n        return axios.get(\"http://localhost:8080/api/getProjects\")\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    getTasks(id) {\r\n        return axios.get(`http://localhost:8080/api/getTasks/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    addTask(newTask) {\r\n        return axios.post(\"http://localhost:8080/api/addTask\", newTask)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    deleteTask(id) {\r\n        return axios.post(\"http://localhost:8080/api/delTask\", {id: id})\r\n            .then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const userAPI = {\r\n    getUserData() {\r\n        return axios.get(\"http://localhost:8080/auth/me\")\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}","import {tasksAPI} from \"../api/api\";\r\n\r\nconst ADD_TASK = 'ADD-TASK'\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\nconst SET_TASKS = 'SET-TASKS'\r\nconst UPDATE_TASK_TYPE = 'UPDATE-TASK-TYPE'\r\nconst UPDATE_STATUS = 'UPDATE_STATUS'\r\nconst DEL_TASK = 'DEL_TASK'\r\nconst SET_PROJECTS = 'SET_PROJECTS'\r\nconst CHANGE_PROJECT = 'CHANGE_PROJECT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\n\r\nconst SOLVED = 'SOLVED'\r\nconst IN_PROGRESS = 'IN PROGRESS'\r\nconst ACTIVE = 'ACTIVE'\r\n\r\nconst BUG = 'BUG'\r\nconst TASK = 'TASK'\r\n\r\nlet initState = {\r\n    projects: [],\r\n    selectedProject: {id: 1, name: ''},\r\n    tasks: [],\r\n    newTaskText: '',\r\n    taskType: TASK,\r\n    status: ACTIVE\r\n}\r\n\r\nconst tasksReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.task],\r\n                newTaskText: ''\r\n            }\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state, newTaskText: action.newText\r\n            }\r\n\r\n        case UPDATE_TASK_TYPE:\r\n            return {\r\n                ...state, taskType: action.taskType\r\n            }\r\n\r\n        case UPDATE_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n\r\n        case SET_TASKS:\r\n            return  {...state,\r\n                tasks: [...action.tasks]}\r\n\r\n        case SET_PROJECTS:\r\n            return  {...state,\r\n                projects: action.projects\r\n            }\r\n\r\n        case CHANGE_PROJECT:\r\n            return {...state, selectedProject: state.projects[action.project.valueOf()]}\r\n\r\n        case DEL_TASK:\r\n\r\n            state.tasks.splice(state.tasks.findIndex(e => e.id === action.id), 1)\r\n            return  {...state, tasks: [...state.tasks]}\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addTaskToState = (task) => ({type: ADD_TASK, task: task})\r\nexport const deleteTaskFromState = (id) => ({type: DEL_TASK, id: id})\r\nexport const updateNewPostText = (text) => ({type: UPDATE_NEW_POST_TEXT, newText: text})\r\nexport const setTasks = (tasks) => ({type: SET_TASKS, tasks: tasks})\r\nexport const updateTaskType = (taskType) => ({type: UPDATE_TASK_TYPE, taskType: taskType})\r\nexport const updateStatus = (status) => ({type: UPDATE_STATUS, status: status})\r\nexport const setProjects = (projects) => ({type: SET_PROJECTS, projects: projects})\r\nexport const changeProject = (project) => ({type: CHANGE_PROJECT, project: project})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\n\r\nexport const getTasks = (id) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        tasksAPI.getTasks(id).then(data => {\r\n            dispatch(setTasks(data))\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n    }\r\n}\r\nexport const getProjects = () => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        tasksAPI.getProjects().then(data => {\r\n            dispatch(setProjects(data))\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n    }\r\n}\r\nexport const deleteTask = (id) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        tasksAPI.deleteTask(id).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(deleteTaskFromState(data.id))\r\n                dispatch(toggleIsFetching(false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTask = (newTask) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n\r\n        tasksAPI.addTask(newTask).then(data => {\r\n            if (data.resultCode === 0) {\r\n                newTask.id = data.id;\r\n                dispatch(addTask(newTask))\r\n                dispatch(toggleIsFetching(false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default tasksReducer\r\n","import Tasks from \"./Tasks\";\r\nimport {\r\n    addTask,\r\n    setTasks,\r\n    updateNewPostText,\r\n    updateTaskType,\r\n    updateStatus,\r\n    deleteTask, setProjects,\r\n    changeProject, getTasks,\r\n    getProjects\r\n} from \"../../../redux/tasks-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nclass TasksContainer extends React.Component {\r\n\r\n    newTextRef = React.createRef()\r\n    taskTypeRef = React.createRef()\r\n    statusRef = React.createRef()\r\n    selectedProjRef = React.createRef()\r\n\r\n    componentDidMount() {\r\n        this.props.getProjects()\r\n        this.props.getTasks(this.props.selectedProject.id)\r\n    }\r\n\r\n    addTask = () => {\r\n\r\n        let now = new Date()\r\n        let newTask = {\r\n            text: this.props.newTaskText,\r\n            taskType: this.props.taskType,\r\n            status: this.props.status,\r\n            pubDate: now.toLocaleDateString(),\r\n            time: now.getHours() + ':' + now.getMinutes(),\r\n            projectId: this.props.selectedProject.id,\r\n        }\r\n        this.props.addTask(newTask)\r\n    }\r\n\r\n    onPostChange = () => {\r\n        let text = this.newTextRef.current.value\r\n        this.props.updateNewPostText(text)\r\n    }\r\n\r\n    onTypeChange = () => {\r\n        let taskType = this.taskTypeRef.current.value\r\n        this.props.updateTaskType(taskType)\r\n    }\r\n\r\n    onStatusChange = () => {\r\n        let status = this.statusRef.current.value\r\n        this.props.updateStatus(status)\r\n    }\r\n\r\n    onProjectChange = (e) => {\r\n        let project = e.target.value\r\n        this.props.changeProject(project)\r\n        this.props.getTasks(project.valueOf())\r\n    }\r\n\r\n    render() {\r\n        return <Tasks tasks = {this.props.tasks}\r\n                      projects = {this.props.projects}\r\n                      selectedProject = {this.props.selectedProject}\r\n\r\n                      newTaskText = {this.props.newTaskText}\r\n                      taskType = {this.props.taskType}\r\n                      status = {this.props.status}\r\n\r\n                      newPostTextRef = {this.newTextRef}\r\n                      taskTypeRef = {this.taskTypeRef}\r\n                      statusRef = {this.statusRef}\r\n                      selectedProjRef = {this.selectedProjRef}\r\n\r\n                      onTypeChange = {this.onTypeChange}\r\n                      onPostChange = {this.onPostChange}\r\n                      onStatusChange = {this.onStatusChange}\r\n                      addTask = {this.addTask}\r\n                      deleteTask = {this.props.deleteTask}\r\n                      onProjectChange = {this.onProjectChange}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasksData.tasks,\r\n        projects: state.tasksData.projects,\r\n        newTaskText: state.tasksData.newTaskText,\r\n        taskType: state.tasksData.taskType,\r\n        status: state.tasksData.status,\r\n        selectedProject: state.tasksData.selectedProject\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {updateNewPostText,\r\n        addTask,\r\n        setTasks,\r\n        updateTaskType,\r\n        updateStatus,\r\n        deleteTask,\r\n        setProjects,\r\n        changeProject,\r\n        getTasks,\r\n        getProjects\r\n    })\r\n(TasksContainer)\r\n\r\n","import React from 'react'\r\nimport s from './Project.module.css'\r\nimport TasksContainer from \"./Tasks/TasksContainer\";\r\n\r\nconst Project = (props) => {\r\n        return <div className={s.profileContent}>\r\n            <TasksContainer store = {props.store}/>\r\n        </div>\r\n}\r\n\r\nexport default Project","import s from \"./Notes.module.css\"\r\n\r\nconst Notes = () => {\r\n    return <div className={s.notes}>\r\n        <textarea className={s.textField}/>\r\n    </div>\r\n}\r\n\r\nexport default Notes","import s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>\r\n        <div>{props.text}</div>\r\n        <div className={s.sendTime}>{props.dateAndTime}</div>\r\n    </div>\r\n}\r\n\r\nexport default Message","import s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return <div className={s.item}>\r\n        <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let newMessageText = React.createRef()\r\n\r\n    let sendMessage = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    let onNewMessageBodyChange = () => {\r\n        let text = newMessageText.current.value\r\n        props.onNewMessageBodyChange(text)\r\n    }\r\n\r\n    let contactsElements = props.contacts.map(el => <DialogItem id = {el.id}\r\n                                                                name={el.name}\r\n                                                                key = {el.id}\r\n    />)\r\n\r\n    let messages = props.messages.map(m => <Message id = {m.id}\r\n                                                    text={m.text}\r\n                                                    dateAndTime = {m.dateAndTime}\r\n                                                    key = {m.id}\r\n    />)\r\n        .reverse()\r\n\r\n    return <div className={s.dialogsPage}>\r\n        <div className={s.dialogs}>\r\n            <div className={s.contacts}>Контакты</div>\r\n            {contactsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n            {messages}\r\n        </div>\r\n        <div className={s.newMessage}>\r\n            <textarea placeholder={'Напишите    сообщение...'}\r\n                      className={s.newMessageTA}\r\n                      ref = {newMessageText}\r\n                      value={props.newMessageText}\r\n                      onChange={onNewMessageBodyChange}\r\n            />\r\n            <div className={s.buttonsBlock}>\r\n                <button className={s.sendMessage}\r\n                        onClick={sendMessage}>\r\n                    Отправить\r\n                </button>\r\n                <button className={s.addFile}>Прикрепить</button>\r\n                <button className={s.recordVoice}>Записать голосовое</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Dialogs","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nlet initialState = {\r\n    contacts: [\r\n        {id: 0, name: 'Роман'},\r\n        {id: 1, name: 'Фарш'},\r\n        {id: 2, name: 'Гена'},\r\n        {id: 3, name: 'Semen'},\r\n        {id: 4, name: 'Птица Детектив'},\r\n        {id: 5, name: 'Лёха'},\r\n        {id: 6, name: 'Саня'},\r\n        {id: 7, name: 'Микрочелик'},\r\n    ],\r\n    messages: [\r\n        {id: 0, text: 'Вынес дату в массив вне компоненты', dateAndTime: '26.09.2021\\n21:16'},\r\n        {id: 1, text: 'Узнал, что такое тернарное выражение', dateAndTime: '26.09.2021\\n21:18'},\r\n        {id: 2, text: 'Зарефакторил функцию мапинга', dateAndTime: '26.09.2021\\n21:20'},\r\n        {id: 3, text: 'Посмотрел 25 урок IT-KAMASUTRA', dateAndTime: '26.09.2021\\n21:25'},\r\n        {id: 4, text: 'Узнал, что переименовывание переменной в WebStorm происходит на комбинацию клавиш Shift+F6', dateAndTime: '26.09.2021\\n21:29'},\r\n        {id: 5, text: 'Баг: при нажатии на \"Птица Детектив\" меняется отступ. Статус: активен', dateAndTime: '26.09.2021\\n22:41'},\r\n        {id: 6, text: 'Баг: Блок \"Сообщения\" прокручивается вниз, а не должен. Статус: активен', dateAndTime: '27.09.2021\\n0:04'},\r\n        {id: 7, text: 'Баг: Блок \"Сообщения\" прокручивается вниз, а не должен. Статус: решено', dateAndTime: '27.09.2021\\n13:07'},\r\n        {id: 8, text: 'Вынес все данные в стэйт. По-прежнему не решил проблему с прокруткой блоков. Возможно, дело в гриде', dateAndTime: '27.09.2021\\n21:49'},\r\n    ],\r\n\r\n    newMessageText: ''\r\n}\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let now = new Date()\r\n            let newMessage = {\r\n                id: 15,\r\n                text: state.newMessageText,\r\n                dateAndTime: now.toLocaleDateString()\r\n                    + '\\n' + now.getHours()\r\n                    + ':' + now.getMinutes()\r\n            }\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageText: action.newText}\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = () => ({type: SEND_MESSAGE})\r\nexport const updateNewMessageTextActionCreator = (text) => ({type: UPDATE_NEW_MESSAGE_BODY, newText: text})\r\n\r\nexport default messagesReducer","import Dialogs from \"./Dialogs\";\r\nimport {sendMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/messages-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesData.messages,\r\n        contacts: state.messagesData.contacts,\r\n        newMessageText: state.messagesData.newMessageText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onNewMessageBodyChange: (text) => {\r\n            let action = updateNewMessageTextActionCreator(text)\r\n            dispatch(action)\r\n        },\r\n        sendMessage: () => {\r\n            let action = sendMessageActionCreator()\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default DialogsContainer","export default __webpack_public_path__ + \"static/media/header.9d76cbd7.jpg\";"," import React from 'react';\r\n import  s from './Header.module.css'\r\n import i from '../../assets/img/header.jpg'\r\n import {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img alt={\"header\"} src={i}/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","const SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login) => ({type: SET_USER_DATA, data: {id, email, login}})\r\n\r\nexport default authReducer"," import React from 'react';\r\n import Header from \"./Header\";\r\n import axios from \"axios\";\r\n import {setAuthUserData} from \"../../redux/auth-reducer\";\r\n import {connect} from \"react-redux\";\r\n import {userAPI} from \"../../api/api\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        userAPI.getUserData().then ( data => {\r\n            if (data.resultCode === true) {\r\n                let {id, login, email} = data.data;\r\n                this.props.setAuthUserData(id, email, login);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps,\r\n    {setAuthUserData}\r\n    )(HeaderContainer);","import './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Project from \"./components/ProjectTasks/Project\";\r\nimport {Route} from \"react-router-dom\"\r\nimport Notes from \"./components/Notes/Notes\";\r\nimport DialogsContainer from \"./components/Dialogs/Dialogs-container\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\n\r\nconst App = (props) => {\r\n  return (\r\n      <div className=\"App\">\r\n          <div className={\"GridBlock\"}>\r\n              <HeaderContainer store = {props.store}/>\r\n              <Navbar />\r\n              <div className={'Content-Wrapper'}>\r\n                  <Route path={'/dialogs'} render ={() => <DialogsContainer store = {props.store}/>}/>\r\n                  <Route path={'/project'} render={() => <Project store = {props.store}/>} />\r\n                  <Route path={'/notes'} render={() => <Notes store = {props.store}/>} />\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","let initialState = {}\r\n\r\nconst newsReducer = (state = initialState, action) => {\r\n    return state\r\n}\r\n\r\nexport default newsReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport tasksReducer from \"./tasks-reducer\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport newsReducer from \"./news-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleWare from 'redux-thunk'\r\n\r\nlet reducers = combineReducers({\r\n    tasksData: tasksReducer,\r\n    messagesData: messagesReducer,\r\n    newsPage: newsReducer,\r\n    auth: authReducer\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store-redux\";\r\n\r\nexport let rerenderEntireTree = (store) => {\r\n\r\n    ReactDOM.render(\r\n            <BrowserRouter>\r\n                <App store = {store}\r\n                />\r\n            </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree(store)\r\n\r\nstore.subscribe(() => rerenderEntireTree(store))\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2fjJw\",\"item\":\"Navbar_item__xoBLf\",\"active\":\"Navbar_active__1kAm8\"};"],"sourceRoot":""}